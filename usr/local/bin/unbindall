#!/usr/bin/perl
use strict;
use warnings;
use File::Basename;
use File::Path qw (make_path remove_tree);

my $debhome = "/mnt/debhome";
my $svn = "/mnt/svn";

# default paths for debhome and svn

# links in the chroot environment for /mnt/svn /mnt/debhome
my $debhomechrootoriginal = "/mnt/ad64/debhome";
my $svnchrootoriginal = "/mnt/ad64/svn";

# for debug info, set to 1 by cml parameter
my $debug = 0;

my $chroot_dir = "/chroot";


######################################################
# sub to restore links /mnt/svn /mnt/debhome in chroot
# to the default original values for the chroot system
# these links are only used in the live system.
# In the chroot the directories /mnt/debhome /mnt/svn
# are bound to the same in the main system.
# in the live system /mnt/debhome /mnt/svn are links
# to /mnt/ad64/debhome and /mnt/ad64/svn by default.
# parameters: none
######################################################
sub restorechrootlinks {

	# if chroot_dir/chrootenvironment does not exist
	# just return
	return unless -d $chroot_dir . "/chrootenvironment";
	
	# bindall() maded /mnt/svn and /mnt/debhome directories for binding
	# in the chroot system. restore them to the links for the live system
	rmdir $chroot_dir . $svn if -d $chroot_dir . $svn;
	rmdir $chroot_dir . $debhome if -d $chroot_dir . $debhome;

	# debhomepath is of form /mnt/ad64/debhome
	# svnpath is of form /mnt/ad64/svn
	# (name, path) = fileparse(fullpath)
	my $debhomemount = (fileparse($debhomechrootoriginal))[1];
	my $svnmount = (fileparse($svnchrootoriginal))[1];
	
	# make dirs incase they do not exist
	print "restorechrootlinks in chroot: mkdir $chroot_dir" . "$debhomemount\n" if $debug;
	make_path("$chroot_dir" . "$debhomemount", {owner => "robert", user => "robert", group => "robert"}) unless -d "$chroot_dir" . "$debhomemount";

	print "restorechrootlinks in chroot: mkdir $chroot_dir" . "$svnmount\n" if $debug;
	make_path("$chroot_dir" . "$svnmount", {owner => "robert", user => "robert", group => "robert"}) unless -d "$chroot_dir" . "$svnmount";

	# make the link for /mnt/debhome -> /chroot_dir/mnt/ad64/debhome in the chroot environment
	unlink "$chroot_dir" . "$debhome";
	print "restorechrootlinks in chroot: $debhome -> $debhomechrootoriginal\n" if $debug;
	my $rc = system("chroot $chroot_dir ln -s $debhomechrootoriginal $debhome");
	die "restorechrootlinks in chroot: error making $debhome -> $debhomechrootoriginal link in chroot: $!" unless $rc == 0;

	# make the link for /mnt/svn -> /chroot_dir/$svnpath in the chroot environment
	unlink "$chroot_dir" . "$svn";
	print "restorechrootlinks in chroot: $svn -> $svnchrootoriginal\n" if $debug;
	$rc = system("chroot $chroot_dir ln -s $svnchrootoriginal $svn");
	die "restorechrootlinks in chroot: Could not make link $svn -> $svnchrootoriginal in chroot: $!" unless $rc == 0;

	# set ownership in chroot environment
	system("chown robert:robert -h $chroot_dir" . "$svn");
	system("chown robert:robert -h $chroot_dir" . "$debhome");
	system("chown robert:robert $chroot_dir" . "/mnt");

}	



#######################################################
# sub to unbind sys tmp dev dev/pts proc for chroot
# environment
# usage: unbindall ()
# returns: none
# exceptions: dies if chroot dir does not exist
#######################################################
sub unbindall {
	# parameters
	die "$chroot_dir does not exist, exiting\n" unless -d $chroot_dir;

	# bind for all in list
	my @bindlist = ("$debhome", "$svn", "/sys", "/tmp", "/dev/pts", "/dev", "/proc");
	my $rc;
	foreach my $dir (@bindlist) {
		$rc = system("findmnt $chroot_dir" . "$dir 2>&1 >/dev/null");
		if ($rc == 0) {
			# dir mounted, unmount it
			print "unmounting $chroot_dir" . "$dir\n" if $debug;
			$rc = system("umount $chroot_dir" . "$dir");
			die "Could not umount $chroot_dir" . "$dir: $!\n" unless $rc == 0;
		} else {
			# dir not mounted
			print "$chroot_dir" . "$dir not mounted\n" if $debug;
		}
	}

	# check that /chroot/mnt/debhome and /chroot/mnt/svn do not contain
	# any files. If they do, abort
	# open directory
	foreach my $dir ($chroot_dir . $debhome, $chroot_dir . $svn) {

		# make sure $dir is not a link
		if ( ! -l $dir and -d $dir) {
			print "unbindall: open dir $dir to check for files\n" if $debug;
			opendir (my $dh, $dir) || die "Could not open directory $dir: $!\n";
			my @nofiles = readdir $dh;
			closedir $dh;
			# remove count for . and ..
			my $nofiles = scalar(@nofiles) - 2;
			print "no of files in dir $dir is $nofiles\n" if $debug;
			die "$dir still contains $nofiles files\n" if $nofiles > 0;
		}
	}
	
	# restore the links in the chroot environment
	restorechrootlinks($chroot_dir);
}
# check cml parameters
$debug = 1 if $ARGV[0] && "$ARGV[0]" eq "debug";

unbindall ();
